//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CitadelsApp.GameServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServiceReference.IGameService")]
    public interface IGameService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/StartGame", ReplyAction="http://tempuri.org/IGameService/StartGameResponse")]
        void StartGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/StartGame", ReplyAction="http://tempuri.org/IGameService/StartGameResponse")]
        System.Threading.Tasks.Task StartGameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Login", ReplyAction="http://tempuri.org/IGameService/LoginResponse")]
        void Login(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/Login", ReplyAction="http://tempuri.org/IGameService/LoginResponse")]
        System.Threading.Tasks.Task LoginAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/SelectRole", ReplyAction="http://tempuri.org/IGameService/SelectRoleResponse")]
        void SelectRole(int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/SelectRole", ReplyAction="http://tempuri.org/IGameService/SelectRoleResponse")]
        System.Threading.Tasks.Task SelectRoleAsync(int roleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/GetAvaivableRoles", ReplyAction="http://tempuri.org/IGameService/GetAvaivableRolesResponse")]
        CommonLIbrary.Role[] GetAvaivableRoles(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/GetAvaivableRoles", ReplyAction="http://tempuri.org/IGameService/GetAvaivableRolesResponse")]
        System.Threading.Tasks.Task<CommonLIbrary.Role[]> GetAvaivableRolesAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CreateGame", ReplyAction="http://tempuri.org/IGameService/CreateGameResponse")]
        void CreateGame(string gameTitle, int maxPlayers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CreateGame", ReplyAction="http://tempuri.org/IGameService/CreateGameResponse")]
        System.Threading.Tasks.Task CreateGameAsync(string gameTitle, int maxPlayers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/GetAvaivableGames", ReplyAction="http://tempuri.org/IGameService/GetAvaivableGamesResponse")]
        CommonLIbrary.Game[] GetAvaivableGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/GetAvaivableGames", ReplyAction="http://tempuri.org/IGameService/GetAvaivableGamesResponse")]
        System.Threading.Tasks.Task<CommonLIbrary.Game[]> GetAvaivableGamesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceChannel : CitadelsApp.GameServiceReference.IGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServiceClient : System.ServiceModel.ClientBase<CitadelsApp.GameServiceReference.IGameService>, CitadelsApp.GameServiceReference.IGameService {
        
        public GameServiceClient() {
        }
        
        public GameServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void StartGame() {
            base.Channel.StartGame();
        }
        
        public System.Threading.Tasks.Task StartGameAsync() {
            return base.Channel.StartGameAsync();
        }
        
        public void Login(string username) {
            base.Channel.Login(username);
        }
        
        public System.Threading.Tasks.Task LoginAsync(string username) {
            return base.Channel.LoginAsync(username);
        }
        
        public void SelectRole(int roleId) {
            base.Channel.SelectRole(roleId);
        }
        
        public System.Threading.Tasks.Task SelectRoleAsync(int roleId) {
            return base.Channel.SelectRoleAsync(roleId);
        }
        
        public CommonLIbrary.Role[] GetAvaivableRoles(int gameId) {
            return base.Channel.GetAvaivableRoles(gameId);
        }
        
        public System.Threading.Tasks.Task<CommonLIbrary.Role[]> GetAvaivableRolesAsync(int gameId) {
            return base.Channel.GetAvaivableRolesAsync(gameId);
        }
        
        public void CreateGame(string gameTitle, int maxPlayers) {
            base.Channel.CreateGame(gameTitle, maxPlayers);
        }
        
        public System.Threading.Tasks.Task CreateGameAsync(string gameTitle, int maxPlayers) {
            return base.Channel.CreateGameAsync(gameTitle, maxPlayers);
        }
        
        public CommonLIbrary.Game[] GetAvaivableGames() {
            return base.Channel.GetAvaivableGames();
        }
        
        public System.Threading.Tasks.Task<CommonLIbrary.Game[]> GetAvaivableGamesAsync() {
            return base.Channel.GetAvaivableGamesAsync();
        }
    }
}
